@using EiTSoftBot.Dto
@using EiTSoftBot.Dto.Responses
@inherits LayoutComponentBase
@inject SimulatorClient client
@inject ConnectionMonitor monitor
@implements IDisposable

<div class="page">
    <main>
        <nav class="navbar navbar-expand-md bg-primary" data-bs-theme="dark">
            <div class="container-fluid">
                <a class="navbar-brand" href="#">EiT SoftBot</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item">
                            <NavLink class="nav-link" aria-current="page" href="/">Home</NavLink>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">About</a>
                        </li>
                    </ul>
                    <span class="bg-white rounded px-2">
                        MiR Connected: <span class="@MirColor">@MirMessage</span> | Sim Connected: <span class="@(monitor.SimulatorConnected ? "text-success" : "text-danger")">@monitor.SimulatorConnected</span>

                        <i class="bi bi-arrow-clockwise ms-1" style="cursor: pointer;" @onclick="monitor.RefreshState"></i>
                    </span>
                </div>
            </div>
        </nav>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    protected override void OnInitialized()
    {
        client.OnMessageRecieved += OnMessage;
    }

    public string MirColor
    {
        get
        {
            return monitor switch
            {
                { MirConnectorConnected: true, MirConnected: true } => "text-sucess",
                { MirConnectorConnected: true, MirConnected: false } => "text-warning",
                _ => "text-danger"
            };
        }
    }

    public string MirMessage {
        get
        {
            return monitor switch {
                { MirConnectorConnected: true, MirConnected: true } => "True",
                { MirConnectorConnected: true, MirConnected: false } => "Connector Only",
                { MirConnectorConnected: false, MirConnected: false } => "False",
                _ => "Unknown"
            };
        }
    }


    public void OnMessage(BaseMessage msg)
    {
        if(msg is RefreshStateMessage)
        {
            _ = InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        // Clean up
        client.OnMessageRecieved -= OnMessage;
    }
}