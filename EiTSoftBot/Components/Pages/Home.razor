@page "/"
@inject MirConfigJsInteropService mirConfig
@inject IJSRuntime jsRuntime
@inject SimulatorClient simulatorClient
@inject ConnectionMonitor monitor
@inject MissionRepository missionRepo
@using EiTSoftBot.Dto
@using EiTSoftBot.Dto.Entities
@using EiTSoftBot.Dto.Requests
@using EiTSoftBot.Dto.Responses
@using System.Text.Json
@implements IDisposable
<PageTitle>MiR Box Configurator</PageTitle>
<HeadContent>
    <script type="module" src="/js/threeJsInterop.jsm?v=@(Version)"></script>
</HeadContent>

<div class="d-flex justify-content-between align-items-center">
    <h1>MiR Box Configurator</h1>

    <div class="d-flex align-items-center">
        <select disabled="@(SentToSimulation)" class="form-select" id="missionSelect" @onchange="OnMissionSelect" value="@_selectedMissionID">
            <option>Choose mission</option>
            @foreach (var mission in missionRepo.Missions)
            {
                <option value="@mission.Id">@mission.Name</option>
            }
        </select>

        <i class="bi bi-arrow-clockwise ms-1" style="cursor: pointer;" @onclick="RefreshMissions"></i>

        <button @onclick="SubmitBoxes" class="btn btn-success ms-2" style="min-width: 17rem;" disabled="@(SentToSimulation || !monitor.SimulatorConnected)">@SubmitButtonText</button>
    </div>
</div>

<div class="row">
    <div class="col-md-6 row @(SentToSimulation ? "d-none" : "")">
        <div class="col-sm-4">
            <div class="card mb-2" style="width: 100%;display:none;" id="selectedBoxEditContainer">
                <div class="bg-success text-white card-header">
                    Properties of selected box
                </div>
                <div class="card-body">
                    <div>
                        <label class="form-label" for="selectedWeightInput">Weight (kg):</label>
                        <input class="form-control" type="number" id="selectedWeightInput" value="0">
                    </div>
                </div>
            </div>

            <div class="d-grid gap-2">
                <button class="btn btn-outline-primary mt-1" onclick="addBox(0,0,0.185,0.075,0.165,0.062)">Add <i>"box2"</i></button>
                <button class="btn btn-outline-primary mt-1" onclick="addBox(0,0,0.125,0.105,0.185,0.063)">Add <i>"basebox"</i></button>
                <button class="btn btn-outline-primary mt-1" onclick="addBox(0,0,0.215,0.225,0.16,0.149)">Add <i>"big box"</i></button>
                <button class="btn btn-outline-danger mt-1" onclick="removeAllBoxes()">Remove all boxes</button>
                <button class="btn btn-outline-secondary mt-1" data-bs-toggle="collapse" data-bs-target="#customBoxCollapse">Custom box</button>
            </div>
            <div class="collapse" id="customBoxCollapse">
                <div class="card card-body mt-2">
                    <h4>Enter Box Dimensions</h4>
                    <div>
                        <label class="form-label" for="x">X-coordinate:</label>
                        <input class="form-control" type="number" id="x" name="x" value="0" placeholder="Enter X-coordinate">
                    </div>
                    <div>
                        <label class="form-label" for="y">Y-coordinate:</label>
                        <input class="form-control" type="number" id="y" name="y" value="0" placeholder="Enter Y-coordinate">
                    </div>
                    <div>
                        <label class="form-label" for="width">Width (in meters):</label>
                        <input class="form-control" type="number" id="width" name="width" value="0.1" placeholder="Enter width">
                    </div>
                    <div>
                        <label class="form-label" for="length">Length (in meters):</label>
                        <input class="form-control" type="number" id="length" name="length" value="0.1" placeholder="Enter length">
                    </div>
                    <div>
                        <label class="form-label" for="height">Height (in meters):</label>
                        <input class="form-control" type="number" id="height" name="height" value="0.1" placeholder="Enter height">
                    </div>
                    <div>
                        <label class="form-label" for="weight">Weight (in kilogrammes):</label>
                        <input class="form-control" type="number" id="weight" name="weight" value="4" placeholder="Enter weight">
                    </div>
                    <button class="btn btn-primary mt-1" onclick="callAddBox()">Add Box</button>
                </div>
            </div>
            <hr />

            <div class="accordion" id="settingsAccordion">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSnapping" aria-expanded="false" aria-controls="collapseSnapping">
                            Snapping
                        </button>
                    </h2>
                    <div id="collapseSnapping" class="accordion-collapse collapse" data-bs-parent="#settingsAccordion">
                        <div class="accordion-body">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="snapping" onchange="changeSnapping()" checked>
                                <label class="form-check-label" for="snapping">
                                    Snapping
                                </label>
                            </div>
                            <div>
                                <label class="form-label" for="snappingFactor">Snapping Factor:</label>
                                <input class="form-control" type="number" id="snappingFactor" name="snappingFactor" value="50" placeholder="Enter snapping factor" onchange="changeSnappingFactor()">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Save / Export buttons -->
            <div class="d-grid gap-2 mt-4">
                <button class="btn btn-outline-primary mt-1" onclick="quickSave()">Quick Save</button>
                <button class="btn btn-outline-primary mt-1" onclick="quickLoad()">Quick Load</button>
                <button class="btn btn-outline-primary mt-1" onclick="exportToString()">Export configuration</button>
                <button class="btn btn-outline-primary mt-1" onclick="importFromString()">Import configuration</button>
            </div>
        </div>
        <div class="col-sm-8" id="canvasContainer">
        </div>
    </div>
    
    <div class="col-md-6 row @(SentToSimulation ? "" : "d-none")">
        @if (_simulationEndResponse is { } simResponse)
        {
            <div class="col-12">
                <h2>Simulation response</h2>

                <p class="m-0"><b>Calculated Max Acceleration</b>: @simResponse.MaxAcceleration%<sup>of max-acceleration</sup></p>
                <p class="m-0"><b>Misson with adjusted speeds</b>:</p>
                <ol>
                    @foreach(var waypoint in simResponse.Mission.Waypoints){
                        <li><span class="badge rounded bg-primary me-2"><b>Waypoint: </b>@waypoint.Name</span> @Math.Round(waypoint.Speed.GetValueOrDefault(), 2) m/s</li>
                    }
                </ol>

                @if (IsUpdatingMiR)
                {
                    <p>Sending data to MiR</p>
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }

                @if (_sentToMirSuccessfully is { } success)
                {
                    <div class="card text-bg-secondary mb-3" style="max-width: 18rem;">
                        <div class="card-header">MiR Status</div>
                        <div class="card-body">
                            <h5 class="card-title">@(success ? "Successfully updated the MiR" : "Failed to update the MiR")</h5>
                        </div>
                    </div>
                }

                <p>Current MiR status: <code>@monitor.MirStatusString</code></p>

                <div>
                    <button class="btn btn-primary" disabled="@(!monitor.MirConnected || IsUpdatingMiR)" @onclick="UpdateMirWithSimResponse">Send to MiR</button>
                    <button class="btn btn-success ms-2" disabled="@(!monitor.MirConnected)" @onclick="() => SetMirStatus(true)">Start MiR</button>
                    <button class="btn btn-warning ms-2" disabled="@(!monitor.MirConnected)" @onclick="() => SetMirStatus(false)">Pause MiR</button>
                    <button class="btn btn-danger ms-2" @onclick="ResetSimResult">Clear simulation response</button>
                </div>

                <details class="mt-4">
                    <summary><span class="badge bg-secondary rounded me-2">Debug</span>Raw simulation response</summary>

                    <pre>@JsonSerializer.Serialize(simResponse, new JsonSerializerOptions() { WriteIndented = true })</pre>
                </details>
            </div>
        }
        else
        {
            // Waiting for a response
            <div class="col-12 text-center">
                <h2>Simulating...</h2>
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Waiting for a response from the simulation...</p>
                <button class="btn btn-danger" @onclick="ResetSimResult">Stop waiting</button>
            </div>
        }
    </div>
    <div class="col-md-6">
        <div class="ThreeJsContainer" id="@ThreeJsContainerId">
            <!-- 3d Canvas will appear here -->
        </div>
        <hr />
        <p>
            <b>License info:</b><br />
            "Warehouse FBX Model Free" (<a href="https://skfb.ly/oVOIy">https://skfb.ly/oVOIy</a>) by Nicholas-3D is licensed under Creative Commons Attribution (<a href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</a>).<br />
            "MiR200" (<a href="https://grabcad.com/library/mir200-2">https://grabcad.com/library/mir200-2</a>) by tony ke is provided by the GRABCAD Community.
        </p>
    </div>
</div>


<script defer type="text/javascript" src="/js/sketch.js?v=@(Version)"></script>

@code {
    string Version = File.GetLastWriteTimeUtc(typeof(App).Assembly.Location).Ticks.ToString();
    private const string ThreeJsContainerId = "3dContainer";
    private bool _fecthedRealMissions = false;
    private string? _selectedMissionID;
    private SimulationEndResponse? _simulationEndResponse;
    private bool? _sentToMirSuccessfully;

    private double XValue { get; set; } = 0d;
    private double YValue { get; set; } = 0d;
    private double ZValue { get; set; } = 0d;

    private bool SentToSimulation {get; set; } = false;
    private bool IsUpdatingMiR { get; set; } = false;
    private string SubmitButtonText { get; set; } = "Send to simulation";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
            await jsRuntime.InvokeVoidAsync("startP5Sketch");
            await mirConfig.Initialize3DScene(ThreeJsContainerId);
            await simulatorClient.OpenConnectionAsync();
            simulatorClient.OnMessageRecieved += SimulatorClientOnOnMessageRecieved;
            await RefreshMissions();
        }
    }

    private void SimulatorClientOnOnMessageRecieved(BaseMessage message)
    {
        if (message is GetAllMissionsResponse)
        {
            _ = missionRepo.PersistToCache();
            _fecthedRealMissions = true;
            _ = InvokeAsync(StateHasChanged);
        }
        else if(message is SimulationEndResponse simEnd)
        {
            _simulationEndResponse = simEnd;
            _sentToMirSuccessfully = null;
            _ = InvokeAsync(StateHasChanged);
        }
        else if (message is RefreshStateMessage)
        {
            if (!monitor.SimulatorConnected && _simulationEndResponse is null && SentToSimulation)
            {
                SentToSimulation = false;
                _ = jsRuntime.InvokeVoidAsync("showErrorToast", "The simulator disconnected. Aborted simulating.");
            }
            _ = InvokeAsync(StateHasChanged);
            if(!_fecthedRealMissions && monitor.MirConnectorConnected)
            {
                _ = RefreshMissions();
            }
        }
    }

    public async Task RefreshMissions()
    {
        if (monitor.MirConnectorConnected)
        {
            await simulatorClient.RequestMissionsAsync();
        }else
        {
            await missionRepo.LoadFromCache();
            StateHasChanged();
        }
    }

    private async Task OnMissionSelect(ChangeEventArgs e)
    {
        _selectedMissionID = e.Value?.ToString();
        var mission = missionRepo.Missions.FirstOrDefault(x => x.Id == _selectedMissionID); 
        if(mission is not null){
            await mirConfig.Set3DMission(mission);
        }
        StateHasChanged();
    }

    public async Task SubmitBoxes()
    {
        if (SentToSimulation)
        {
            return;
        }

        _simulationEndResponse = null;
        SentToSimulation = true;
        SubmitButtonText = "Please wait...";
        StateHasChanged();
        try
        {
            var boxes = await mirConfig.GetBoxConfiguration();
            if (boxes.Count == 0)
            {
                SentToSimulation = false;
                return;
            }
            var mujocoBoxes = boxes.Select(x=>x.AsMujocoBox()).ToList();
            var mission = missionRepo.Missions.FirstOrDefault(x => x.Id == _selectedMissionID);
            if(mission is null)
            {
                await jsRuntime.InvokeVoidAsync("showErrorToast", "Please select a mission.");
                SentToSimulation = false;
                return;
            }
            await simulatorClient.StartSimulationAsync(mission, mujocoBoxes);
            await jsRuntime.InvokeVoidAsync("showSuccessToast", $"Sent {mujocoBoxes.Count} boxes to the simulation!");
        }
        catch (Exception e)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Failed to send data to the simulation\n" + e.Message);
            SentToSimulation = false;
        }
        finally
        {
            SubmitButtonText = "Send to simulation";
            StateHasChanged();
        }
    }

    public async Task SetMirStatus(bool ready)
    {
        await simulatorClient.SetMirStatusAsync(ready).ConfigureAwait(false);
        await Task.Delay(200);
        await monitor.RefreshState();
    }

    public void ResetSimResult()
    {
        SentToSimulation = false;
        _sentToMirSuccessfully = null;
        _simulationEndResponse = null;
    }

    public async Task UpdateMirWithSimResponse()
    {
        if(_simulationEndResponse is null || IsUpdatingMiR)
        {
            return;
        }

        IsUpdatingMiR = true;
        _sentToMirSuccessfully = null;
        StateHasChanged();
        try
        {
            await simulatorClient.SetMissionAsync(_simulationEndResponse.Mission, _simulationEndResponse.MaxAcceleration).ConfigureAwait(false);
            _sentToMirSuccessfully = true;
        }
        catch (Exception e)
        {
            _sentToMirSuccessfully = false;
            await jsRuntime.InvokeVoidAsync("alert", "Failed to send data to the MiR\n" + e.Message);
        }
        finally
        {
            IsUpdatingMiR = false;
        }
    }

    public void Dispose()
    {
        simulatorClient.OnMessageRecieved -= SimulatorClientOnOnMessageRecieved;
    }
}
