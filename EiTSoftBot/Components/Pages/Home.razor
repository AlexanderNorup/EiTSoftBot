@page "/"
@inject MirConfigJsInteropService mirConfig
@inject IJSRuntime jsRuntime
@inject SimulatorClient simulatorClient
<PageTitle>MiR Box Configurator</PageTitle>
<HeadContent>
    <script type="module" src="/js/threeJsInterop.js"></script>
</HeadContent>

<div class="d-flex justify-content-between align-items-center">
    <h1>MiR Box Configurator</h1>
    <div>
        <button @onclick="SubmitBoxes" class="btn btn-success" disabled="@IsSendingData">@SubmitButtonText</button>
    </div>
</div>

<div class="row">
    <div class="col-md-6 row">
        <div class="col-sm-4">
            <div class="card mb-2" style="width: 100%;display:none;" id="selectedBoxEditContainer">
                <div class="bg-success text-white card-header">
                    Properties of selected box
                </div>
                <div class="card-body">
                    <div>
                        <label class="form-label" for="selectedWeightInput">Weight (kg):</label>
                        <input class="form-control" type="number" id="selectedWeightInput" value="0">
                    </div>
                </div>
            </div>

            <div class="d-grid gap-2">
                <button class="btn btn-outline-primary mt-1" onclick="addBox(0,0,0.1,0.1,0.1,1)">Add small box</button>
                <button class="btn btn-outline-primary mt-1" onclick="addBox(0,0,0.2,0.1,0.1,2)">Add medium box</button>
                <button class="btn btn-outline-primary mt-1" onclick="addBox(0,0,0.2,0.2,0.3,4)">Add large box</button>
                <button class="btn btn-outline-danger mt-1" onclick="removeAll2DBoxes()">Remove all boxes</button>
                <button class="btn btn-outline-secondary mt-1" data-bs-toggle="collapse" data-bs-target="#customBoxCollapse">Custom box</button>
            </div>
            <div class="collapse" id="customBoxCollapse">
                <div class="card card-body mt-2">
                    <h4>Enter Box Dimensions</h4>
                    <div>
                        <label class="form-label" for="x">X-coordinate:</label>
                        <input class="form-control" type="number" id="x" name="x" value="0" placeholder="Enter X-coordinate">
                    </div>
                    <div>
                        <label class="form-label" for="y">Y-coordinate:</label>
                        <input class="form-control" type="number" id="y" name="y" value="0" placeholder="Enter Y-coordinate">
                    </div>
                    <div>
                        <label class="form-label" for="width">Width (in meters):</label>
                        <input class="form-control" type="number" id="width" name="width" value="0.1" placeholder="Enter width">
                    </div>
                    <div>
                        <label class="form-label" for="length">Length (in meters):</label>
                        <input class="form-control" type="number" id="length" name="length" value="0.1" placeholder="Enter length">
                    </div>
                    <div>
                        <label class="form-label" for="height">Height (in meters):</label>
                        <input class="form-control" type="number" id="height" name="height" value="0.1" placeholder="Enter height">
                    </div>
                    <div>
                        <label class="form-label" for="weight">Weight (in kilogrammes):</label>
                        <input class="form-control" type="number" id="weight" name="weight" value="4" placeholder="Enter weight">
                    </div>
                    <button class="btn btn-primary mt-1" onclick="callAddBox()">Add Box</button>
                </div>
            </div>
            <hr />

            <div class="accordion" id="settingsAccordion">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSnapping" aria-expanded="false" aria-controls="collapseSnapping">
                            Snapping
                        </button>
                    </h2>
                    <div id="collapseSnapping" class="accordion-collapse collapse" data-bs-parent="#settingsAccordion">
                        <div class="accordion-body">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="snapping" onchange="changeSnapping()" checked>
                                <label class="form-check-label" for="snapping">
                                    Snapping
                                </label>
                            </div>
                            <div>
                                <label class="form-label" for="snappingFactor">Snapping Factor:</label>
                                <input class="form-control" type="number" id="snappingFactor" name="snappingFactor" value="50" placeholder="Enter snapping factor" onchange="changeSnappingFactor()">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-sm-8" id="canvasContainer">
        </div>
    </div>
    <div class="col-md-6">
        <div class="ThreeJsContainer" id="@ThreeJsContainerId">
            <!-- 3d Canvas will appear here -->
        </div>
        <hr />
        <p>
            <b>License info:</b><br />
            "Warehouse FBX Model Free" (<a href="https://skfb.ly/oVOIy">https://skfb.ly/oVOIy</a>) by Nicholas-3D is licensed under Creative Commons Attribution (<a href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</a>).<br />
            "MiR200" (<a href="https://grabcad.com/library/mir200-2">https://grabcad.com/library/mir200-2</a>) by tony ke is provided by the GRABCAD Community.
        </p>
    </div>
</div>


<script defer type="text/javascript" src="/js/sketch.js"></script>

@code {
    private const string ThreeJsContainerId = "3dContainer";

    private double XValue { get; set; } = 0d;
    private double YValue { get; set; } = 0d;
    private double ZValue { get; set; } = 0d;

    private bool IsSendingData { get; set; } = false;
    private string SubmitButtonText { get; set; } = "Send to simulation";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("startP5Sketch");
            await mirConfig.Initialize3DScene(ThreeJsContainerId);
        }
    }

    public async Task SubmitBoxes()
    {
        if (IsSendingData)
        {
            return;
        }

        IsSendingData = true;
        SubmitButtonText = "Please wait...";
        StateHasChanged();
        try
        {
            var boxes = await mirConfig.GetBoxConfiguration();
            if (boxes.Count == 0)
            {
                return;
            }
            var gazeboBoxes = boxes.Select(GazeboBox.FromJsBox).ToList();
            await simulatorClient.SendGazeboBoxesAsync(gazeboBoxes);
            await jsRuntime.InvokeVoidAsync("showSuccessToast", $"Sent {gazeboBoxes.Count} boxes to the simulation!");
        }
        catch (Exception e)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Failed to send data to the simulation\n" + e.Message);
        }
        finally
        {
            IsSendingData = false;
            SubmitButtonText = "Send to simulation";
            StateHasChanged();
        }
    }

}
